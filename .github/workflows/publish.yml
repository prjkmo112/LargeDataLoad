name: Build and Release

on: 
  push: 
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]

permissions: 
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    outputs:
      release-url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: release test ${{ github.ref_name }}
          draft: false
          prerelease: false

  build:
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependancy
        run: pip install pyinstaller

      - name: Build with Pyinstaller
        run: pyinstaller index.spec

      - name: Create zip file (windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path dist/LargeDataLoad -DestinationPath LargeDataLoad_windows.zip
          echo "ASSET_PATH=./LargeDataLoad_windows.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ASSET_NAME=LargeDataLoad_windows.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ASSET_CONTENT_TYPE=application/zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create tar.gz file (linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -zcvf LargeDataLoad_linux.tar.gz dist/LargeDataLoad
          echo "ASSET_PATH=./LargeDataLoad_linux.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=LargeDataLoad_linux.tar.gz" >> $GITHUB_ENV
          echo "ASSET_CONTENT_TYPE=application/gzip" >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release-url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: ${{ env.ASSET_CONTENT_TYPE }}